// Package port provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package port

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	google "github.com/google/uuid"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// Create a user
	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)
	// Delete a user by UUID
	// (DELETE /users/{uuid})
	DeleteUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID)
	// Get a user by UUID
	// (GET /users/{uuid})
	GetUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID)
	// Update a user by UUID
	// (PUT /users/{uuid})
	PutUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all users
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a user
// (POST /users)
func (_ Unimplemented) PostUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user by UUID
// (DELETE /users/{uuid})
func (_ Unimplemented) DeleteUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a user by UUID
// (GET /users/{uuid})
func (_ Unimplemented) GetUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a user by UUID
// (PUT /users/{uuid})
func (_ Unimplemented) PutUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUsersUuid operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUuid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid google.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersUuid(w, r, uuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersUuid operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUuid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid google.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersUuid(w, r, uuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutUsersUuid operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUuid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid google.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUsersUuid(w, r, uuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.PostUsers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{uuid}", wrapper.DeleteUsersUuid)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{uuid}", wrapper.GetUsersUuid)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{uuid}", wrapper.PutUsersUuid)
	})

	return r
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse []User

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers400JSONResponse Error

func (response GetUsers400JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers403JSONResponse Error

func (response GetUsers403JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers404JSONResponse Error

func (response GetUsers404JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse Error

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetUsersdefaultJSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUsersRequestObject struct {
	Body *PostUsersJSONRequestBody
}

type PostUsersResponseObject interface {
	VisitPostUsersResponse(w http.ResponseWriter) error
}

type PostUsers201JSONResponse User

func (response PostUsers201JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers400JSONResponse Error

func (response PostUsers400JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers401JSONResponse Error

func (response PostUsers401JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers403JSONResponse Error

func (response PostUsers403JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers404JSONResponse Error

func (response PostUsers404JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers500JSONResponse Error

func (response PostUsers500JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostUsersdefaultJSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUsersUuidRequestObject struct {
	Uuid google.UUID `json:"uuid"`
}

type DeleteUsersUuidResponseObject interface {
	VisitDeleteUsersUuidResponse(w http.ResponseWriter) error
}

type DeleteUsersUuid204Response struct {
}

func (response DeleteUsersUuid204Response) VisitDeleteUsersUuidResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersUuid400JSONResponse Error

func (response DeleteUsersUuid400JSONResponse) VisitDeleteUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersUuid401JSONResponse Error

func (response DeleteUsersUuid401JSONResponse) VisitDeleteUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersUuid403JSONResponse Error

func (response DeleteUsersUuid403JSONResponse) VisitDeleteUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersUuid404JSONResponse Error

func (response DeleteUsersUuid404JSONResponse) VisitDeleteUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersUuid500JSONResponse Error

func (response DeleteUsersUuid500JSONResponse) VisitDeleteUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersUuiddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteUsersUuiddefaultJSONResponse) VisitDeleteUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUsersUuidRequestObject struct {
	Uuid google.UUID `json:"uuid"`
}

type GetUsersUuidResponseObject interface {
	VisitGetUsersUuidResponse(w http.ResponseWriter) error
}

type GetUsersUuid200JSONResponse User

func (response GetUsersUuid200JSONResponse) VisitGetUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUuid400JSONResponse Error

func (response GetUsersUuid400JSONResponse) VisitGetUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUuid401JSONResponse Error

func (response GetUsersUuid401JSONResponse) VisitGetUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUuid403JSONResponse Error

func (response GetUsersUuid403JSONResponse) VisitGetUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUuid404JSONResponse Error

func (response GetUsersUuid404JSONResponse) VisitGetUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUuid500JSONResponse Error

func (response GetUsersUuid500JSONResponse) VisitGetUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUuiddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetUsersUuiddefaultJSONResponse) VisitGetUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutUsersUuidRequestObject struct {
	Uuid google.UUID `json:"uuid"`
	Body *PutUsersUuidJSONRequestBody
}

type PutUsersUuidResponseObject interface {
	VisitPutUsersUuidResponse(w http.ResponseWriter) error
}

type PutUsersUuid200JSONResponse User

func (response PutUsersUuid200JSONResponse) VisitPutUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersUuid400JSONResponse Error

func (response PutUsersUuid400JSONResponse) VisitPutUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersUuid401JSONResponse Error

func (response PutUsersUuid401JSONResponse) VisitPutUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersUuid403JSONResponse Error

func (response PutUsersUuid403JSONResponse) VisitPutUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersUuid404JSONResponse Error

func (response PutUsersUuid404JSONResponse) VisitPutUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersUuid500JSONResponse Error

func (response PutUsersUuid500JSONResponse) VisitPutUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersUuiddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutUsersUuiddefaultJSONResponse) VisitPutUsersUuidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Create a user
	// (POST /users)
	PostUsers(ctx context.Context, request PostUsersRequestObject) (PostUsersResponseObject, error)
	// Delete a user by UUID
	// (DELETE /users/{uuid})
	DeleteUsersUuid(ctx context.Context, request DeleteUsersUuidRequestObject) (DeleteUsersUuidResponseObject, error)
	// Get a user by UUID
	// (GET /users/{uuid})
	GetUsersUuid(ctx context.Context, request GetUsersUuidRequestObject) (GetUsersUuidResponseObject, error)
	// Update a user by UUID
	// (PUT /users/{uuid})
	PutUsersUuid(ctx context.Context, request PutUsersUuidRequestObject) (PutUsersUuidResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request) {
	var request GetUsersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostUsers operation middleware
func (sh *strictHandler) PostUsers(w http.ResponseWriter, r *http.Request) {
	var request PostUsersRequestObject

	var body PostUsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsers(ctx, request.(PostUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersResponseObject); ok {
		if err := validResponse.VisitPostUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteUsersUuid operation middleware
func (sh *strictHandler) DeleteUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID) {
	var request DeleteUsersUuidRequestObject

	request.Uuid = uuid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersUuid(ctx, request.(DeleteUsersUuidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersUuid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUsersUuidResponseObject); ok {
		if err := validResponse.VisitDeleteUsersUuidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetUsersUuid operation middleware
func (sh *strictHandler) GetUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID) {
	var request GetUsersUuidRequestObject

	request.Uuid = uuid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUuid(ctx, request.(GetUsersUuidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUuid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersUuidResponseObject); ok {
		if err := validResponse.VisitGetUsersUuidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PutUsersUuid operation middleware
func (sh *strictHandler) PutUsersUuid(w http.ResponseWriter, r *http.Request, uuid google.UUID) {
	var request PutUsersUuidRequestObject

	request.Uuid = uuid

	var body PutUsersUuidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersUuid(ctx, request.(PutUsersUuidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersUuid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutUsersUuidResponseObject); ok {
		if err := validResponse.VisitPutUsersUuidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTW8bNxD9KwTb40q7bhLA2FMTuy58SBG01SnwgeKOVjT4lSFpWDH2vxccriwp66Qo",
	"EKWAoNuaM+R7HM48Dq0nLp3xzoKNgbdPPMg1GEGfvyE6zB8dBInKR+UsbznkYWYgBNEDr7hH5wGjApok",
	"XQfTOesYPSsTyaHi8CiM18DbN01T8bjxwFuubIQekA8V364/WUpdXFq2P7S3Fhcyqgf4gEpCmK8cmjmB",
	"vi+LzfP6aIUuO3uGDRGV7fkwVBzhU1IIHW8/8pHplsnds79b3oOMmeUiAEXoMAZghNL5IzMQMceMRiaA",
	"FbfC0B4nhpRU94Jh+AqJW+tTPAaTL2JCXtW4yjQi2V3ZlSuZYKOQcY8Gv5fpsxH460posQStxVxmLgWa",
	"vweUa2E7FYBdq15FodmNkNHhhs3YzXYO+xukddr1SrArh36e2R/myO9gAZVkwnbMpBDZElheuoeOZVqY",
	"eVVcKwk20K7/nUJGiSpSmuWIs6vdQg+AoSBfzBte8cfZMgVlIYSZkOjsxvCWG5RrsknhxVJpFTd7VvSm",
	"GJ0NyQDOAvSmFCVHiDl+Q8WdByu84i1/NW8Iyou4pqOuUwCkrx4o6DkPRA7IbUchiQtyyOcZvLOhZMgv",
	"TbM9LLA0T3ivlaSZ9X3Iu9qqQv5SEQxN/BlhxVv+U73Tj3oUj5rKYpeqAlFsSnIcntNbplWIzK1YIT9U",
	"/PV/5PMtGqXMX8B9Jzr2J3xKEGLBvDg+5sKKFNcO1WfoCuir44PeOFyqrgNbEF8fH/EPF9mNS5b2+OZH",
	"HObtKOrsL8AHQDY6ZreVSDoen0Gy8OhBRujKHUeqGZIxAjel9JjQepfj3oUXKvSDC3slSsn5znWb70Z/",
	"d00Mh6oeMcEwkYWL7wr8YkVkFZUIIm4r4lz659I/qdK/ouxmgmqfbOWarp9yfzeU7lZDhKkcXNM4CcIi",
	"94L5qkdhINIt//GJq4yfr/9dB5WK42FpV3t7fG4DR8/DZi/3H72bjYO9c72G+WJxe71vmSnjHca9pqk4",
	"jr1I/lvFdVrOpTN1MdWENgzD3URlXk8bfJKFEpWzLJxl4RRlodT2KAtsuWFUZEP17db9hGWgOXqz8XaU",
	"4LOenPXkNF8YEzEZ/yP0xSsjnaKY/O+vpebHvJaS786vpbOMnaiMLSi7J0pGTkS5iFRCPf6k0Na1dlLo",
	"tQuxvWwum/rhgg/V11zIejf8EwAA//9kEW1P8xgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
